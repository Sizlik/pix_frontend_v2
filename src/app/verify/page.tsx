"use client"
import { useRouter } from "next/navigation";
import {useEffect, useState} from "react";
import {PixInput, PixInputMask} from "@/components/inputs/pixInputs";
import {SubmitHandler, useForm} from "react-hook-form";
import {CheckToken, RequestVerify, VerifyToken} from "@/routes/routes";
import {getCookie} from "cookies-next";
import PixButton from "@/components/button/button";

type verifyInput = {
    code: string;
}

export default function ConfirmEmailPage() {
    const router = useRouter();
    const [isSending, setIsSending] = useState(false);
    const [resendTimer, setResendTimer] = useState(60);
    const [message, setMessage] = useState("");
    const {
        register,
        handleSubmit,
        formState: { errors },
    } = useForm<verifyInput>({ mode: "onChange" });
    const [user, setUser] = useState<{ email: string, is_verified: boolean }>();

    useEffect(() => {
        const user = JSON.parse(getCookie("user")!)
        if (user.is_verified == true) router.push("/dashboard/orders")
        setUser(user);
    }, []);

    useEffect(() => {
        if (resendTimer > 0) {
            const timer = setTimeout(() => setResendTimer(resendTimer - 1), 1000);
            return () => clearTimeout(timer);
        }
    }, [resendTimer]);

    const onSubmit: SubmitHandler<verifyInput> = async (data) => {
        data.code = data.code.replaceAll(" ", "")
        if (data.code.length !== 6) {
            setMessage("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥");
            return;
        }

        setIsSending(true);
        setMessage("");

        try {
            if (!user?.email) return
            const res = await VerifyToken(data.code, user.email)
            if (res.status == 200) {
                const token = getCookie("token")
                if (token) {
                    CheckToken({token}).then((res) => {
                        router.push("/dashboard/orders")
                    })
                }
            } else {
                setMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥");
            }
        } catch (error) {
            console.error(error);
            setMessage("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –û—à–∏–±–∫–∞");
        }

        setIsSending(false);
    };

    const handleResend = async () => {
        if (resendTimer > 0) return;

        setMessage("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞...");
        try {
            if (!user?.email) return
            const res = await RequestVerify(user.email);
            if (res.status == 200 || res.status == 202) {
                setResendTimer(60);
                setMessage("üì® –ö–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
            } else {
                setMessage("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥");
            }
        } catch (err) {
            setMessage("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ");
        }
    };

    const handleLogout = () => {
        router.push("/dashboard/logout"); // –ò–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é: "/"
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100 px-4">
            <div className="bg-white p-6 rounded-xl shadow-md w-full max-w-sm">
                <h2 className="text-xl font-semibold mb-4 text-center">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É</h2>
                <div className="my-4">–ù–∞ –≤–∞—à—É –ø–æ—á—Ç—É <span className="font-bold">{user?.email}</span> –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</div>
                <form onSubmit={handleSubmit(onSubmit)} className="flex flex-col gap-4">
                    <PixInputMask
                        className="text-center"
                        name="code"
                        register={register}
                        mask="9 9 9 9 9 9"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥"
                    />

                    <PixButton value="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" type="submit" className="w-full" />

                    <PixButton
                        onClick={handleResend}
                        disabled={resendTimer > 0}
                        className={`w-full ${
                            resendTimer > 0 ? "bg-gray-300 text-gray-600 cursor-not-allowed" : "bg-emerald-900 hover:bg-emerald-800 text-white"
                        }`}
                        value={resendTimer > 0 ? `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑ (${resendTimer})` : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑"}
                    >

                    </PixButton>

                    <PixButton
                        onClick={handleLogout}
                        variant="cancel"
                        value="–í—ã–π—Ç–∏"
                    />

                    {message && <p className="mt-4 text-center text-sm text-gray-700">{message}</p>}
                </form>
            </div>
        </div>
);
}
